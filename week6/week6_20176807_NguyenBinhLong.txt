Assignment 1:
- First, register $a0 stores the address of A, and $a1 is the size of A.
- The max sum value store inside $v1, while the current prefix sum value is store inside $t1
- The program will update the value of current prefix sum through every loop then compare it to the value of max sum:
	+ if max sum < current prefix sum ($v1 < $t1) then max sum = current prefix sum
	+ if max sum >= current prefix sum ($v1 >= $t1) then jump to 'test' to increase i if i<n
- Given array A = {-2,6,-1,3,-2} and the output $v1 = 6
=> the program run correctly.

------------------------------
Assignment 2:
- The program will find the maximum value of an array and swap it to the last position of the array
- Then it will continue the above procedures for the remaining n-1 first element of the array, excluding the last element which is already sorted
- Given array A={7,-2,5,1,5,6,7,3,6,8,8,59,5} and Aend is the last position of this array
- $a0 (0x10010000) store the value of sorted array, which is sorted correctly {-2,1,3,5,5,5,6,6,7,7,8,8,59}
=> the program run correctly.


------------------------------
Assignment 3:
.data
A: 	.word 7,-2,5,1,5,6,7,3,6,8,8,59,5
.text
	la $a0, A	# a0 = Address(A[0])
	li $a1, 12	# a1 = n = number of elements-1
	add $a1,$a1,-1	# a1 = n-1
	li $t0, 0	#initialize index i in $t0 to 0
	li $t3, 0
loop1:
	li $t1, 0	#initialize index j in $t1 to 0
	slt $t4, $t0, $a1	# i < n-1 ?
	bne $t4, $zero, loop2	# if true, loop2
	j end
loop2:
	sub $a2, $a1, $t0	# a2 = n-1-i
	slt $t4, $t1, $a2	# j < n-1-i ?
	beq $t4, $zero, inc_i 	# if false, inc_i
	add $s0, $a0, $t3	# s0 = address(A[j])
	lw $s1, 0($s0)		# s1 = A[j]
	addi $t2, $t3, 4	# t2 = j + 1
	add $s2, $a0, $t2	# s2 = address(A[j+1])
	lw $s3, 0($s2)		# s3 = A[j+1]
	slt $t4, $s3, $s1	# A[j+1] < A[j]?
	bne $t4, $zero, swap	# if true, swap(A[j+1], A[j])
	j inc_j
inc_i:
	addi $t0, $t0, 1	# i++
	j loop1
inc_j:
	addi $t1, $t1, 1	# j++
	add $t3, $t1, $t1	# t3 = 2j
	add $t3, $t3, $t3	# t3 = 4j 
	j loop2	 
swap:
	sw $s1, 0($s2)	# load A[j] to address A[j+1]
	sw $s3, 0($s0)	# load A[j+1] to address A[j]
	j inc_j
end:


------------------------------
Assignment 4:
.data
A: 	.word 7,-2,5,1,5,6,7,3,6,8,8,59,5
.text
	la $a0, A	# a0 = Address(A[0])
	li $a1, 13	# a1 = n = number of elements
	li $t0, 1	#initialize index i in $t0 to 1
	li $t3, 4
loop1:
	slt $t4, $t0, $a1	# i < n?
	beq $t4, $zero, end	# if false, end
	add $s0, $a0, $t3	# s0 = address(A[i])
	lw $s1, 0($s0)		# s1 = key = A[i]
	add $t1, $t0, -1	# j = i-1
loop2:
	add $t3, $t1, $t1	# t3 = 2j
	add $t3, $t3, $t3	# t3 = 4j
	add $s2, $a0, $t3	# s2 = address(A[j])
	addi $s4, $s2, 4	# s4 = address(A[j+1])
	slt $t4, $t1, $zero	# j < 0?
	bne $t4, $zero, key 	# if true, key
	lw $s3, 0($s2)		# s3 = A[j]
	slt $t4, $s1, $s3	# key < A[j] ?
	beq $t4, $zero, key 	# if false, key
	sw $s3, 0($s4)
	addi $t1, $t1, -1
	j loop2
key:
	sw $s1, 0($s4)
inc_i:
	addi $t0, $t0, 1	# i = i+1
	add $t3, $t0, $t0	# t3 = 2i
	add $t3, $t3, $t3	# t3 = 4i
	j loop1
end:
